"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildWithPlugin = void 0;
const architect_1 = require("@angular-devkit/architect");
const build_angular_1 = require("@angular-devkit/build-angular");
const rxjs_1 = require("rxjs");
const buildWithPlugin = (options, context) => {
    const buildTarget = (0, architect_1.targetFromTargetString)(options.buildTarget);
    // options.buildTarget = "@angular-devkit/build-angular:application";
    function setup() {
        return __awaiter(this, void 0, void 0, function* () {
            const targetOptions = yield context.getTargetOptions(buildTarget);
            if ((yield builderName()) === "@ngx-env/builder:application") {
                // Because of ngxEnv being removed from the options, we need to validate it here
                yield context.validateOptions(targetOptions, "@ngx-env/builder:application");
            }
            return targetOptions;
        });
    }
    function builderName() {
        return __awaiter(this, void 0, void 0, function* () {
            return context.getBuilderNameForTarget(buildTarget);
        });
    }
    return (0, rxjs_1.combineLatest)([setup(), builderName()]).pipe((0, rxjs_1.switchMap)(([_options, builderName]) => {
        if (builderName === "@ngx-env/builder:browser") {
            return (0, build_angular_1.executeExtractI18nBuilder)(options, context);
        }
        else {
            delete _options.ngxEnv;
            context.getTargetOptions = () => __awaiter(void 0, void 0, void 0, function* () { return _options; });
            return (0, build_angular_1.executeExtractI18nBuilder)(options, Object.assign(Object.assign({}, context), { getBuilderNameForTarget: () => __awaiter(void 0, void 0, void 0, function* () { return "@angular-devkit/build-angular:" + builderName.split(":")[1]; }) }));
        }
    }));
};
exports.buildWithPlugin = buildWithPlugin;
exports.default = (0, architect_1.createBuilder)(exports.buildWithPlugin);
