"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildWithPlugin = void 0;
const architect_1 = require("@angular-devkit/architect");
const build_angular_1 = require("@angular-devkit/build-angular");
const core_1 = require("@dotenv-run/core");
const rxjs_1 = require("rxjs");
const get_environment_1 = require("../utils/get-environment");
const project_1 = require("../utils/project");
const webpack_plugin_1 = require("../utils/webpack-plugin");
const index_html_serve_1 = require("../utils/index-html-serve");
const buildWithPlugin = (options, context) => {
    const buildTarget = (0, architect_1.targetFromTargetString)(options.buildTarget);
    function builderName() {
        return __awaiter(this, void 0, void 0, function* () {
            return context.getBuilderNameForTarget(buildTarget);
        });
    }
    function setup() {
        return __awaiter(this, void 0, void 0, function* () {
            const targetOptions = (yield context.getTargetOptions(buildTarget));
            if ((yield builderName()) === "@ngx-env/builder:application") {
                // Because of ngxEnv being removed from the options, we need to validate it here
                yield context.validateOptions(targetOptions, "@ngx-env/builder:application");
            }
            return targetOptions;
        });
    }
    return (0, rxjs_1.combineLatest)([setup(), builderName(), (0, project_1.getProjectCwd)(context)]).pipe((0, rxjs_1.switchMap)(([_options, builderName, cwd]) => {
        const dotenvRunOptions = Object.assign(Object.assign(Object.assign({}, options.ngxEnv), _options.ngxEnv), { global: "_NGX_ENV_", cwd });
        if (builderName === "@ngx-env/builder:application") {
            options.forceEsbuild = true;
            const { full, raw } = (0, core_1.env)(Object.assign(Object.assign({}, dotenvRunOptions), { global: "_NGX_ENV_", environment: (0, get_environment_1.getEnvironment)(buildTarget.configuration) }));
            _options.define = full;
            context.getTargetOptions = () => __awaiter(void 0, void 0, void 0, function* () { return _options; });
            context.validateOptions = () => __awaiter(void 0, void 0, void 0, function* () { return _options; });
            return (0, build_angular_1.executeDevServerBuilder)(options, context, {
                indexHtml: (content) => __awaiter(void 0, void 0, void 0, function* () { return (0, index_html_serve_1.indexHtml)(content, raw, dotenvRunOptions.runtime); }),
            }, {
                builderSelector: () => "@angular-devkit/build-angular:application", // CLI requires it to recognize the builder as an esbuild builder otherwise plugins are not supported
            });
        }
        else {
            return (0, build_angular_1.executeDevServerBuilder)(options, context, (0, webpack_plugin_1.plugin)(dotenvRunOptions));
        }
    }));
};
exports.buildWithPlugin = buildWithPlugin;
exports.default = (0, architect_1.createBuilder)(exports.buildWithPlugin);
