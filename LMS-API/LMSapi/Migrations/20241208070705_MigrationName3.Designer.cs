// <auto-generated />
using System;
using LMSapi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LMSapi.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20241208070705_MigrationName3")]
    partial class MigrationName3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LMSapi.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<int>("BookCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("BookCategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Thomas Corman",
                            AvailableCopies = 5,
                            BookCategoryId = 1,
                            Genre = "Education",
                            ISBN = "978-0262033848",
                            PublicationDate = new DateTime(2009, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Introduction to Algorithm"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Robert Sedgewick & Kevin Wayne",
                            AvailableCopies = 3,
                            BookCategoryId = 1,
                            Genre = "Education",
                            ISBN = "978-0134319650",
                            PublicationDate = new DateTime(2011, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Algorithms"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Steve Skiena",
                            AvailableCopies = 4,
                            BookCategoryId = 1,
                            Genre = "Education",
                            ISBN = "978-1848000698",
                            PublicationDate = new DateTime(2008, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "The Algorithm Design Manual"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Adnan Aziz",
                            AvailableCopies = 6,
                            BookCategoryId = 1,
                            Genre = "Education",
                            ISBN = "978-1466208681",
                            PublicationDate = new DateTime(2010, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Algorithms For Interviews"
                        },
                        new
                        {
                            BookId = 5,
                            Author = "Eric Matthes",
                            AvailableCopies = 7,
                            BookCategoryId = 2,
                            Genre = "Programming",
                            ISBN = "978-1593279288",
                            PublicationDate = new DateTime(2019, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Python Crash Course: A Hands-On, Project-Based Introduction to Programming"
                        },
                        new
                        {
                            BookId = 6,
                            Author = "Joshua Bloch",
                            AvailableCopies = 5,
                            BookCategoryId = 2,
                            Genre = "Programming",
                            ISBN = "978-0134685991",
                            PublicationDate = new DateTime(2018, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Effective Java"
                        },
                        new
                        {
                            BookId = 7,
                            Author = "James F Kurose and Keith W Ross",
                            AvailableCopies = 2,
                            BookCategoryId = 3,
                            Genre = "Networking",
                            ISBN = "978-0133594140",
                            PublicationDate = new DateTime(2017, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "A Top-Down Approach: Computer Networking"
                        },
                        new
                        {
                            BookId = 8,
                            Author = "Ramesh Gaonkar",
                            AvailableCopies = 3,
                            BookCategoryId = 4,
                            Genre = "Hardware",
                            ISBN = "978-9380358173",
                            PublicationDate = new DateTime(2012, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Microprocessor Architecture, Programming, and Applications with the 8085"
                        },
                        new
                        {
                            BookId = 9,
                            Author = "Richard G. Budynas and Keith J. Nisbett",
                            AvailableCopies = 4,
                            BookCategoryId = 5,
                            Genre = "Mechanical",
                            ISBN = "978-0073398204",
                            PublicationDate = new DateTime(2014, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Shigley's Mechanical Engineering Design"
                        },
                        new
                        {
                            BookId = 10,
                            Author = "Frank M. White",
                            AvailableCopies = 6,
                            BookCategoryId = 6,
                            Genre = "Mechanical",
                            ISBN = "978-0073398273",
                            PublicationDate = new DateTime(2015, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Fluid Mechanics"
                        },
                        new
                        {
                            BookId = 11,
                            Author = "James Stewart",
                            AvailableCopies = 2,
                            BookCategoryId = 7,
                            Genre = "Mathematics",
                            ISBN = "978-1285741550",
                            PublicationDate = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Calculus: Early Transcendentals"
                        },
                        new
                        {
                            BookId = 12,
                            Author = "Euclid",
                            AvailableCopies = 10,
                            BookCategoryId = 8,
                            Genre = "Mathematics",
                            ISBN = "978-1888009194",
                            PublicationDate = new DateTime(1956, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Euclid's Elements"
                        },
                        new
                        {
                            BookId = 13,
                            Author = "Jon Kleinberg & Éva Tardos",
                            AvailableCopies = 3,
                            BookCategoryId = 1,
                            Genre = "Education",
                            ISBN = "978-0321295354",
                            PublicationDate = new DateTime(2005, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Algorithm Design"
                        },
                        new
                        {
                            BookId = 14,
                            Author = "Kathy Sierra and Bert Bates",
                            AvailableCopies = 4,
                            BookCategoryId = 2,
                            Genre = "Programming",
                            ISBN = "978-0596009205",
                            PublicationDate = new DateTime(2005, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Head First Java"
                        },
                        new
                        {
                            BookId = 15,
                            Author = "Behrouz A. Forouzan",
                            AvailableCopies = 5,
                            BookCategoryId = 3,
                            Genre = "Networking",
                            ISBN = "978-0073376226",
                            PublicationDate = new DateTime(2012, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Data Communications and Networking"
                        },
                        new
                        {
                            BookId = 16,
                            Author = "David Money Harris & Sarah Harris",
                            AvailableCopies = 6,
                            BookCategoryId = 4,
                            Genre = "Hardware",
                            ISBN = "978-0123944245",
                            PublicationDate = new DateTime(2012, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Digital Design and Computer Architecture"
                        },
                        new
                        {
                            BookId = 17,
                            Author = "Erik Oberg",
                            AvailableCopies = 3,
                            BookCategoryId = 5,
                            Genre = "Mechanical",
                            ISBN = "978-0831130916",
                            PublicationDate = new DateTime(2012, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Machinery's Handbook"
                        },
                        new
                        {
                            BookId = 18,
                            Author = "Claus Borgnakke and Richard E. Sonntag",
                            AvailableCopies = 2,
                            BookCategoryId = 6,
                            Genre = "Mechanical",
                            ISBN = "978-1118321775",
                            PublicationDate = new DateTime(2012, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Fundamentals of Thermodynamics"
                        },
                        new
                        {
                            BookId = 19,
                            Author = "Louis Leithold",
                            AvailableCopies = 4,
                            BookCategoryId = 7,
                            Genre = "Mathematics",
                            ISBN = "978-0065012310",
                            PublicationDate = new DateTime(1990, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "The Calculus with Analytic Geometry"
                        },
                        new
                        {
                            BookId = 20,
                            Author = "Stephen Hawking",
                            AvailableCopies = 7,
                            BookCategoryId = 8,
                            Genre = "Science",
                            ISBN = "978-0553380163",
                            PublicationDate = new DateTime(1998, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "A Brief History of Time"
                        },
                        new
                        {
                            BookId = 21,
                            Author = "Gayle Laakmann McDowell",
                            AvailableCopies = 6,
                            BookCategoryId = 1,
                            Genre = "Education",
                            ISBN = "978-0984782857",
                            PublicationDate = new DateTime(2015, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Cracking the Coding Interview"
                        },
                        new
                        {
                            BookId = 22,
                            Author = "Andrew Hunt and David Thomas",
                            AvailableCopies = 3,
                            BookCategoryId = 2,
                            Genre = "Programming",
                            ISBN = "978-0201616224",
                            PublicationDate = new DateTime(1999, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "The Pragmatic Programmer"
                        },
                        new
                        {
                            BookId = 23,
                            Author = "Andrew S. Tanenbaum",
                            AvailableCopies = 4,
                            BookCategoryId = 3,
                            Genre = "Networking",
                            ISBN = "978-0132126953",
                            PublicationDate = new DateTime(2010, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Computer Networks"
                        },
                        new
                        {
                            BookId = 24,
                            Author = "David A. Patterson & John L. Hennessy",
                            AvailableCopies = 5,
                            BookCategoryId = 4,
                            Genre = "Hardware",
                            ISBN = "978-0124077263",
                            PublicationDate = new DateTime(2013, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Computer Organization and Design"
                        },
                        new
                        {
                            BookId = 25,
                            Author = "John J. Craig",
                            AvailableCopies = 2,
                            BookCategoryId = 5,
                            Genre = "Mechanical",
                            ISBN = "978-0201543612",
                            PublicationDate = new DateTime(1986, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Introduction to Robotics: Mechanics and Control"
                        },
                        new
                        {
                            BookId = 26,
                            Author = "Robert W. Fox, Alan T. McDonald, and Philip J. Pritchard",
                            AvailableCopies = 3,
                            BookCategoryId = 6,
                            Genre = "Mechanical",
                            ISBN = "978-1118139448",
                            PublicationDate = new DateTime(2011, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Introduction to Fluid Mechanics"
                        },
                        new
                        {
                            BookId = 27,
                            Author = "Marijn Haverbeke",
                            AvailableCopies = 8,
                            BookCategoryId = 7,
                            Genre = "Programming",
                            ISBN = "978-1593279509",
                            PublicationDate = new DateTime(2018, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "Eloquent JavaScript"
                        },
                        new
                        {
                            BookId = 28,
                            Author = "Donald E. Knuth",
                            AvailableCopies = 2,
                            BookCategoryId = 8,
                            Genre = "Mathematics",
                            ISBN = "978-0201896831",
                            PublicationDate = new DateTime(1997, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Available",
                            Title = "The Art of Computer Programming"
                        });
                });

            modelBuilder.Entity("LMSapi.Models.BookCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("BookCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "computer",
                            Description = "Covers the design, analysis, and application of algorithms in computer science.",
                            SubCategoryName = "algorithm"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "computer",
                            Description = "Focuses on the syntax, semantics, and implementation of various programming languages.",
                            SubCategoryName = "programming languages"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "computer",
                            Description = "Discusses computer networks, protocols, and communication systems.",
                            SubCategoryName = "networking"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "computer",
                            Description = "Explores physical components and architecture of computer systems.",
                            SubCategoryName = "hardware"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "mechanical",
                            Description = "Covers the design, function, and operation of mechanical systems and machines.",
                            SubCategoryName = "machine"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "mechanical",
                            Description = "Explains the principles of energy transfer in mechanical systems.",
                            SubCategoryName = "transfer of energy"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "mathematics",
                            Description = "Focuses on the study of change through derivatives, integrals, and limits.",
                            SubCategoryName = "calculus"
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "mathematics",
                            Description = "Covers mathematical structures, equations, and relationships between variables.",
                            SubCategoryName = "algebra"
                        });
                });

            modelBuilder.Entity("LMSapi.Models.BookSearch", b =>
                {
                    b.Property<int>("SearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchId"));

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("ResultsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SearchId");

                    b.ToTable("BookSearches");
                });

            modelBuilder.Entity("LMSapi.Models.BorrowedBook", b =>
                {
                    b.Property<int>("BorrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("LateFee")
                        .HasColumnType("real");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BorrowId");

                    b.HasIndex("BookId");

                    b.HasIndex("MemberId");

                    b.ToTable("BorrowedBooks");
                });

            modelBuilder.Entity("LMSapi.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("BookId");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            InventoryId = 1,
                            BookId = 1,
                            Condition = "Good",
                            Location = "Main Library - Shelf A1",
                            Quantity = 5
                        },
                        new
                        {
                            InventoryId = 2,
                            BookId = 2,
                            Condition = "Good",
                            Location = "Main Library - Shelf A1",
                            Quantity = 3
                        },
                        new
                        {
                            InventoryId = 3,
                            BookId = 3,
                            Condition = "Damaged",
                            Location = "Main Library - Shelf A2",
                            Quantity = 4
                        },
                        new
                        {
                            InventoryId = 4,
                            BookId = 4,
                            Condition = "Good",
                            Location = "Main Library - Shelf A3",
                            Quantity = 6
                        },
                        new
                        {
                            InventoryId = 5,
                            BookId = 5,
                            Condition = "Good",
                            Location = "Programming Section - Shelf B1",
                            Quantity = 7
                        },
                        new
                        {
                            InventoryId = 6,
                            BookId = 6,
                            Condition = "Good",
                            Location = "Programming Section - Shelf B2",
                            Quantity = 5
                        },
                        new
                        {
                            InventoryId = 7,
                            BookId = 7,
                            Condition = "Damaged",
                            Location = "Networking Section - Shelf C1",
                            Quantity = 2
                        },
                        new
                        {
                            InventoryId = 8,
                            BookId = 8,
                            Condition = "Lost",
                            Location = "Hardware Section - Shelf D1",
                            Quantity = 3
                        },
                        new
                        {
                            InventoryId = 9,
                            BookId = 9,
                            Condition = "Good",
                            Location = "Mechanical Section - Shelf E1",
                            Quantity = 4
                        },
                        new
                        {
                            InventoryId = 10,
                            BookId = 10,
                            Condition = "Good",
                            Location = "Mechanical Section - Shelf E2",
                            Quantity = 6
                        },
                        new
                        {
                            InventoryId = 11,
                            BookId = 11,
                            Condition = "Damaged",
                            Location = "Mathematics Section - Shelf F1",
                            Quantity = 2
                        },
                        new
                        {
                            InventoryId = 12,
                            BookId = 12,
                            Condition = "Good",
                            Location = "Mathematics Section - Shelf F2",
                            Quantity = 10
                        },
                        new
                        {
                            InventoryId = 13,
                            BookId = 13,
                            Condition = "Good",
                            Location = "Main Library - Shelf A4",
                            Quantity = 3
                        },
                        new
                        {
                            InventoryId = 14,
                            BookId = 14,
                            Condition = "Good",
                            Location = "Programming Section - Shelf B3",
                            Quantity = 4
                        },
                        new
                        {
                            InventoryId = 15,
                            BookId = 15,
                            Condition = "Good",
                            Location = "Networking Section - Shelf C2",
                            Quantity = 5
                        },
                        new
                        {
                            InventoryId = 16,
                            BookId = 16,
                            Condition = "Good",
                            Location = "Hardware Section - Shelf D2",
                            Quantity = 6
                        },
                        new
                        {
                            InventoryId = 17,
                            BookId = 17,
                            Condition = "Good",
                            Location = "Mechanical Section - Shelf E3",
                            Quantity = 3
                        },
                        new
                        {
                            InventoryId = 18,
                            BookId = 18,
                            Condition = "Damaged",
                            Location = "Mechanical Section - Shelf E4",
                            Quantity = 2
                        },
                        new
                        {
                            InventoryId = 19,
                            BookId = 19,
                            Condition = "Good",
                            Location = "Mathematics Section - Shelf F3",
                            Quantity = 4
                        },
                        new
                        {
                            InventoryId = 20,
                            BookId = 20,
                            Condition = "Good",
                            Location = "Science Section - Shelf G1",
                            Quantity = 7
                        });
                });

            modelBuilder.Entity("LMSapi.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MembershipDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("LMSapi.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LMSapi.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("LMSapi.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservationId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("LMSapi.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("LMSapi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 12, 8, 12, 37, 5, 410, DateTimeKind.Local).AddTicks(2583),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "",
                            MobileNumber = "1234567890",
                            Password = "admin1999",
                            Role = "Admin",
                            Username = "admin87"
                        });
                });

            modelBuilder.Entity("LMSapi.Models.Book", b =>
                {
                    b.HasOne("LMSapi.Models.BookCategory", "BookCategory")
                        .WithMany()
                        .HasForeignKey("BookCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookCategory");
                });

            modelBuilder.Entity("LMSapi.Models.BorrowedBook", b =>
                {
                    b.HasOne("LMSapi.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSapi.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LMSapi.Models.Inventory", b =>
                {
                    b.HasOne("LMSapi.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });
#pragma warning restore 612, 618
        }
    }
}
